name: Run packer build on a template file

env:
  CI: true
  GITHUB_REPO_PATH: ${{ github.workspace }}

on: 
  push:
    branches:
        - 'main'
jobs:
  packer_build:
    runs-on: ubuntu-latest
    steps:
      - name: Packer build
        uses:  actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      
      #Compressing the repository
      - name: Zip the repository
        run: zip -r webapp.zip . -x ".git/*" ".github/*"



      
      # Initialize Packer templates
      - name: Initialize Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target: ${{ github.workspace }}/Packer_Template/aws-ubuntu.pkr.hcl

      # validate templates
      - name: Validate Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: ${{ github.workspace }}/Packer_Template/aws-ubuntu.pkr.hcl
      

      # build artifact
      - name: Build Artifact
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: "-color=false -on-error=abort"
          target: ${{ github.workspace }}/Packer_Template/aws-ubuntu.pkr.hcl
        env:
          PACKER_LOG: 1
      
      
      - name: Get ID
        run: |
            AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
            echo "NEW_AMI=$(AMI_ID)" >> $GITHUB_ENV
            echo $NEW_AMI

      - name: Configure Production account's AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Run this
        run: |
             aws ec2 create-launch-template-version --launch-template-name TemplateForEC2 --source-version 1 --launch-template-data '{"ImageId":"${{ env.NEW_AMI}}"}'


      - name: run autoscaling
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name Assignment8-AutoscalingGroup-OFQVY87REBFI --launch-template LaunchTemplateId=${{ secrets.AWS_LAUNCH_TEMPLATE_ID }},Version='$Latest'
          aws autoscaling start-instance-refresh --auto-scaling-group-name Assignment8-AutoscalingGroup-OFQVY87REBFI


      
        
